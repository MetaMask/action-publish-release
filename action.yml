name: 'Publish Release'
description: 'Publish the release'

inputs:
  npm-registry-uri-fragment:
    description: 'The URI fragment that specifies the NPM registry that Yarn or NPM commands will use to access and publish packages. Usually this is the registry URL without the leading protocol, but refer to <https://docs.npmjs.com/cli/v8/configuring-npm/npmrc#auth-related-configuration> for the correct format. Defaults to "//registry.npmjs.org/".'
    required: false
  npm-token:
    description: 'The token used for accessing the NPM registry.'
    required: false

outputs:
  release-version:
    description: 'The version of the release.'
    value: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}

runs:
  using: 'composite'
  steps:
    - run: ${{ github.action_path }}/scripts/configure-package-manager.sh
      shell: bash
      env:
        NPM_REGISTRY_URI_FRAGMENT: ${{ inputs.npm-registry-uri-fragment }}
        NPM_TOKEN: ${{ inputs.npm-token }}
    - id: get-version-strategy
      shell: bash
      run: |
        RELEASE_STRATEGY=$(jq --raw-output ".versioningStrategy" "release.config.json" || echo "fixed")
        echo "RELEASE_STRATEGY=$RELEASE_STRATEGY" >> "$GITHUB_OUTPUT"
    - id: get-release-version
      shell: bash
      run: echo "RELEASE_VERSION=$(jq --raw-output '.version' package.json)" >> "$GITHUB_OUTPUT"
    - id: get-repository-url
      shell: bash
      run: echo "REPOSITORY_URL=$(jq --raw-output '.repository.url' package.json)" >> "$GITHUB_OUTPUT"
    - id: get-release-packages
      if: steps.get-version-strategy.outputs.RELEASE_STRATEGY == 'independent'
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/get-release-packages.sh
    # This sets RELEASE_NOTES as an environment variable, which is expected
    # by the create-github-release step.
    - id: get-release-notes
      shell: bash
      run: node ${{ github.action_path }}/dist/index.js
      env:
        RELEASE_STRATEGY: ${{ steps.get-version-strategy.outputs.RELEASE_STRATEGY }}
        RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
        REPOSITORY_URL: ${{ steps.get-repository-url.outputs.REPOSITORY_URL }}
        RELEASE_PACKAGES: ${{ steps.get-release-packages.outputs.RELEASE_PACKAGES }}
    - id: create-github-release
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/create-github-release.sh
      env:
        RELEASE_STRATEGY: ${{ steps.get-version-strategy.outputs.RELEASE_STRATEGY }}
        RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
        RELEASE_PACKAGES: ${{ steps.get-release-packages.outputs.RELEASE_PACKAGES }}
