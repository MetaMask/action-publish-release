name: 'Publish Release'
description: 'Publish the release'

outputs:
  release-version:
    description: 'The version of the release'
    value: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}

runs:
  using: 'composite'
  steps:
    - id: get-version-strategy
      shell: bash
      run: |
        RELEASE_STRATEGY=$(jq --raw-output ".versioningStrategy" "release.config.json" || echo "fixed")
        echo "::set-output name=RELEASE_STRATEGY::$RELEASE_STRATEGY"
    - id: get-release-version
      shell: bash
      run: |
        RELEASE_VERSION=$(jq --raw-output ".version" "package.json")
        echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
    - id: get-repository-url
      shell: bash
      run: |
        REPOSITORY_URL=$(jq --raw-output ".repository.url" "package.json")
        echo "::set-output name=REPOSITORY_URL::$REPOSITORY_URL"
    - id: get-release-packages
      if: steps.get-version-strategy.outputs.RELEASE_STRATEGY == 'independent'
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/get-release-packages.sh
    # This sets RELEASE_NOTES as an environment variable, which is expected
    # by the create-github-release step.
    - id: get-release-notes
      shell: bash
      run: node ${{ github.action_path }}/dist/index.js
      env:
        RELEASE_STRATEGY: ${{ steps.get-version-strategy.outputs.RELEASE_STRATEGY }}
        RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
        REPOSITORY_URL: ${{ steps.get-repository-url.outputs.REPOSITORY_URL }}
        UPDATED_PACKAGES: ${{ steps.get-release-packages.outputs.UPDATED_PACKAGES }}
    - id: create-github-release
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/create-github-release.sh
      env:
        RELEASE_STRATEGY: ${{ steps.get-version-strategy.outputs.RELEASE_STRATEGY }}
        RELEASE_VERSION: ${{ steps.get-release-version.outputs.RELEASE_VERSION }}
        UPDATED_PACKAGES: ${{ steps.get-release-packages.outputs.UPDATED_PACKAGES }}
