name: Build, Lint, and Test

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-lint-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: yarn --frozen-lockfile
      - run: yarn allow-scripts
      - run: yarn build
      - run: git diff --quiet || { echo 'working directory dirty after "yarn build"'; exit 1; }
      - run: yarn lint
      - run: yarn test
  # tests to ensure get-updated-packages.sh functions as expected
  updated-packages-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Get Latest Version from npm
        id: latestrelease
        run: echo "::set-output name=releasever::$(npm view MetaMask/snaps-skunkworks version --workspaces=false)"
      - uses: actions/checkout@v3
        with:
          repository: MetaMask/snaps-skunkworks
          ref: v${{ steps.latestrelease.outputs.releasever }}
          path: skunkworks
      - uses: actions/checkout@v3
        with:
          path: action-publish-release
      - name: Modify + Get UPDATED_PACKAGES lengths
        id: modify-get-updated-packages
        run: |
          cd skunkworks || exit
          workspaces=$(yarn workspaces list --verbose --json)
          count=0
          packages=()

          while read -r location name; do
            if [[ "$name" != "root" ]]; then
              packages+=("$location")
              count=$((count + 1))
            fi

            if [[ "$count" -eq 2 ]]; then
              break;
            fi
          done< <(echo "$workspaces" | jq --raw-output '"\(.location) \(.name)"')
          for package in "${packages[@]}"; do
            manifest="${package}/package.json"
            manifest_temp="${manifest}_temp"
            version=$(jq --raw-output .version "$manifest")
            version_increment=$(echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            jq --arg version "$version_increment" '.version = $version' "$manifest" > "$manifest_temp"
            mv "$manifest_temp" "$manifest"
          done
          ../action-publish-release/scripts/get-updated-packages.sh
      - name: Get modified UPDATED_PACKAGES lengths
        id: get-modified-updated-packages-length
        run: |
          echo "::set-output name=length::$(echo '${{ steps.modify-get-updated-packages.outputs.UPDATED_PACKAGES }}' | jq '.packages | length')"
      - name: Verify modified UPDATED_PACKAGES lengths
        run: |
          if [[ ${{ steps.get-modified-updated-packages-length.outputs.length }} -ne 2 ]]; then
            echo "modified UPDATED_PACKAGES is an unexpected length"
            exit 1
          fi;

  all-tests-pass:
    runs-on: ubuntu-20.04
    needs: [build-lint-test, updated-packages-test]
    steps:
      - run: echo "Great success"
