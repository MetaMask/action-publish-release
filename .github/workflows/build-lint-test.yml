name: Build, Lint, and Test

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-lint-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: yarn --frozen-lockfile
      - run: yarn allow-scripts
      - run: yarn build
      - run: git diff --exit-code --name-status || { echo 'working directory dirty after "yarn build"'; exit 1; }
      - run: yarn lint
      - run: yarn test
  # tests to ensure get-release-packages.sh functions as expected
  updated-packages-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          repository: MetaMask/snaps-skunkworks
          ref: v0.32.2
          path: skunkworks
      - uses: actions/checkout@v3
        with:
          path: action-publish-release
      - name: Get Packages
        id: get-packages
        run: |
          cd skunkworks || exit
          WORKSPACES=$(yarn workspaces list --verbose --json)
          PUBLIC_PACKAGES=()
          PRIVATE_PACKAGE=()

          while read -r location name; do
            if [[ "$name" != "root" ]]; then
              PRIVATE=$(jq --raw-output '.private' "$location/package.json")
              if [[ "$PRIVATE" != true && "${#PUBLIC_PACKAGES[@]}" -ne 4 ]]; then
                PUBLIC_PACKAGES+=("$location")
              fi
              if [[ "$PRIVATE" == true && "${#PRIVATE_PACKAGE[@]}" -ne 1 ]]; then
                PRIVATE_PACKAGE+=("$location")
              fi
            fi
          done< <(echo "$WORKSPACES" | jq --raw-output '"\(.location) \(.name)"')

          RELEASE_PACKAGES=("${PUBLIC_PACKAGES[@]}" "${PRIVATE_PACKAGE[@]}")
          IFS="," RELEASE_PACKAGES_FORMATTED="${RELEASE_PACKAGES[*]}"
          echo "RELEASE_PACKAGES=$RELEASE_PACKAGES_FORMATTED" >> "$GITHUB_OUTPUT"
      - name: Modify + Get RELEASE_PACKAGES lengths
        id: modify-get-release-packages
        run: |
          # Update the version in a package.json manifest file
          #
          # $1 - The path to the root directory for the package
          # $2 - The operation to perform (either "bump", "unbump", or a
          #      specific version)
          function update_manifest() {
            MANIFEST="${1}/package.json"
            MANIFEST_TEMP="${MANIFEST}_temp"
            VERSION=$(jq --raw-output .version "$MANIFEST")
            echo "package: ${1}, operation: ${2}, current version: ${VERSION}"
            IFS='.' read -r -a VERSIONS <<< "$VERSION"
            MAJOR="${VERSIONS[0]}"
            MINOR="${VERSIONS[1]}"
            PATCH="${VERSIONS[2]}"
            if [[ "$2" == "unbump" ]]; then
              if [[ "$PATCH" == "0" ]]; then
                if [[ "$MINOR" == "0" ]]; then
                  # e.g. 10.0.0 -> 9.9.9
                  NEW_VERSION="$((MAJOR - 1)).9.9"
                else
                  # e.g. 1.10.0 -> 1.9.9
                  NEW_VERSION="${MAJOR}.$((MINOR - 1)).9"
                fi
              else
                # e.g. 1.2.10 -> 1.2.9
                NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH - 1))"
              fi
            elif [[ "$2" == "bump" ]]; then
              # e.g. 1.0.0 -> 1.0.1
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            else
              NEW_VERSION="$2"
            fi
            echo "Updated version: ${NEW_VERSION}"
            jq --arg version "$NEW_VERSION" '.version = $version' "$MANIFEST" > "$MANIFEST_TEMP"
            mv "$MANIFEST_TEMP" "$MANIFEST"
          }
          cd skunkworks || exit
          IFS="," read -r -a RELEASE_PACKAGES <<< "${{ steps.get-packages.outputs.RELEASE_PACKAGES }}"
          # These four packages are public and at version 0.32.2
          # They all have published v0.32.1 versions, but no published 0.32.3
          # version.
          update_manifest "${RELEASE_PACKAGES[0]}" "bump"
          update_manifest "${RELEASE_PACKAGES[1]}" "bump"
          update_manifest "${RELEASE_PACKAGES[2]}" "unbump"
          update_manifest "${RELEASE_PACKAGES[3]}" "0.0.0"
          # This last package is the private examples package
          update_manifest "${RELEASE_PACKAGES[4]}" "bump"
          ../action-publish-release/scripts/get-release-packages.sh
      - name: Get modified RELEASE_PACKAGES lengths
        id: get-modified-updated-packages-length
        run: |
          echo "length=$(echo '${{ steps.modify-get-release-packages.outputs.RELEASE_PACKAGES }}' | jq '.packages | length')" >> "$GITHUB_OUTPUT"
      - name: Verify modified RELEASE_PACKAGES lengths
        run: |
          LENGTH="${{ steps.get-modified-updated-packages-length.outputs.length }}"
          EXPECTED_LENGTH="2"
          if [[ $LENGTH -ne $EXPECTED_LENGTH ]]; then
            echo "modified RELEASE_PACKAGES has length '${LENGTH}', expected length '${EXPECTED_LENGTH}'"
            exit 1
          fi;

  all-tests-pass:
    runs-on: ubuntu-20.04
    needs: [build-lint-test, updated-packages-test]
    steps:
      - run: echo "Great success"
