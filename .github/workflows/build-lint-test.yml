name: Build, Lint, and Test

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-lint-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: yarn --frozen-lockfile
      - run: yarn allow-scripts
      - run: yarn build
      - run: git diff --quiet || { echo 'working directory dirty after "yarn build"'; exit 1; }
      - run: yarn lint
      - run: yarn test
  # tests to ensure get-release-packages.sh functions as expected
  updated-packages-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Get Latest Version from npm
        id: latestrelease
        run: echo "::set-output name=releasever::$(npm view MetaMask/snaps-skunkworks version --workspaces=false)"
      - uses: actions/checkout@v3
        with:
          repository: MetaMask/snaps-skunkworks
          ref: v${{ steps.latestrelease.outputs.releasever }}
          path: skunkworks
      - uses: actions/checkout@v3
        with:
          path: action-publish-release
      - name: Get Packages
        id: get-packages
        run: |
          cd skunkworks || exit
          WORKSPACES=$(yarn workspaces list --verbose --json)
          PUBLIC_PACKAGES=()
          PRIVATE_PACKAGE=()

          while read -r location name; do
            if [[ "$name" != "root" ]]; then
              PRIVATE=$(jq --raw-output '.private' "$location/package.json")
              if [[ "$PRIVATE" != true && "${#PUBLIC_PACKAGES[@]}" -ne 3 ]]; then
                PUBLIC_PACKAGES+=("$location")
              fi
              if [[ "$PRIVATE" == true && "${#PRIVATE_PACKAGE[@]}" -ne 1 ]]; then
                PRIVATE_PACKAGE+=("$location")
              fi
            fi
          done< <(echo "$WORKSPACES" | jq --raw-output '"\(.location) \(.name)"')

          RELEASE_PACKAGES=("${PUBLIC_PACKAGES[@]}" "${PRIVATE_PACKAGE[@]}")

          IFS="," echo "::set-output name=RELEASE_PACKAGES::$(echo "${RELEASE_PACKAGES[*]}")"
      - name: Modify + Get RELEASE_PACKAGES lengths
        id: modify-get-release-packages
        run: |
          cd skunkworks || exit
          function update_manifest() {
            MANIFEST="${1}/package.json"
            MANIFEST_TEMP="${MANIFEST}_temp"
            VERSION=$(jq --raw-output .version "$MANIFEST")
            NEW_VERSION=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            if [[ "$2" == "unbump" ]]; then
              IFS='.' read -r -a VERSIONS <<< "$VERSION"
              if [[ "${VERSIONS[2]}" == "0" ]]; then
                NEW_VERSION=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="."} {$2-=1} 1' | awk 'BEGIN{FS=OFS="."} {$3=9} 1')
              else
                NEW_VERSION=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="."} {$3-=1} 1')
              fi
            fi;
            jq --arg version "$NEW_VERSION" '.version = $version' "$MANIFEST" > "$MANIFEST_TEMP"
            mv "$MANIFEST_TEMP" "$MANIFEST"
          }
          IFS="," read -r -a PACKAGES <<< ${{ steps.get-packages.outputs.packages }}
          # bump public packages
          for i in {0..1}
          do
            update_manifest "${PACKAGES[$i]}" "bump"
          done
          # unbump final single public package
          update_manifest "${PACKAGES[2]}" "unbump"
          # bump private package
          update_manifest "${PACKAGES[3]}" "bump"
          ../action-publish-release/scripts/get-release-packages.sh
      - name: Get modified RELEASE_PACKAGES lengths
        id: get-modified-updated-packages-length
        run: |
          echo "::set-output name=length::$(echo '${{ steps.modify-get-release-packages.outputs.RELEASE_PACKAGES }}' | jq '.packages | length')"
      - name: Verify modified RELEASE_PACKAGES lengths
        run: |
          if [[ ${{ steps.get-modified-updated-packages-length.outputs.length }} -ne 2 ]]; then
            echo "modified RELEASE_PACKAGES is an unexpected length"
            exit 1
          fi;

  all-tests-pass:
    runs-on: ubuntu-20.04
    needs: [build-lint-test, updated-packages-test]
    steps:
      - run: echo "Great success"
